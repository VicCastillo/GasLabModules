;; This has been derived from NetLogo GasLab example
;; It combines procedure `collide-with` with procedure check-for-collision
;; Particles are assumed to own:
;;      mass, speed, energy, and last-collision

to GasLab-collision-and-collide  ;; particle procedure
                        ;; Here we impose a rule that collisions only take place when there
                        ;; are exactly two particles per patch.

  if count other particles-here = 1
  [
    ;; the following conditions are imposed on collision candidates:
    ;;   1. they must have a lower who number than my own, because collision
    ;;      code is asymmetrical: it must always happen from the point of view
    ;;      of just one particle.
    ;;   2. they must not be the same particle that we last collided with on
    ;;      this patch, so that we have a chance to leave the patch after we've
    ;;      collided with someone.
    let candidate one-of other particles-here with
      [who < [who] of myself and myself != last-collision]
    ;; we also only collide if one of us has non-zero speed. It's useless
    ;; (and incorrect, actually) for two particles with zero speed to collide.
    if (candidate != nobody) and (speed > 0 or [speed] of candidate > 0)
    [
      ;; implements a collision with another particle.
      ;;
      ;; THIS IS THE HEART OF THE PARTICLE SIMULATION, AND YOU ARE STRONGLY ADVISED
      ;; NOT TO CHANGE IT UNLESS YOU REALLY UNDERSTAND WHAT YOU'RE DOING!
      ;;
      ;; The two particles colliding are self and other-particle, and while the
      ;; collision is performed from the point of view of self, both particles are
      ;; modified to reflect its effects. This is somewhat complicated, so I'll
      ;; give a general outline here:
      ;;   1. Do initial setup, and determine the heading between particle centers
      ;;      (call it theta).
      ;;   2. Convert the representation of the velocity of each particle from
      ;;      speed/heading to a theta-based vector whose first component is the
      ;;      particle's speed along theta, and whose second component is the speed
      ;;      perpendicular to theta.
      ;;   3. Modify the velocity vectors to reflect the effects of the collision.
      ;;      This involves:
      ;;        a. computing the velocity of the center of mass of the whole system
      ;;           along direction theta
      ;;        b. updating the along-theta components of the two velocity vectors.
      ;;   4. Convert from the theta-based vector representation of velocity back to
      ;;      the usual speed/heading representation for each particle.
      ;;   5. Perform final cleanup and update derived quantities.

      ;;; PHASE 1: initial setup
      ;;; --------
      ;; for convenience, grab some quantities from other-particle
      let mass2    [mass]    of candidate
      let speed2   [speed]   of candidate
      let heading2 [heading] of candidate

      ;; since particles are modeled as zero-size points, theta isn't meaningfully
      ;; defined. we can assign it randomly without affecting the model's outcome.
      let theta (random-float 360)

      ;;; PHASE 2: convert velocities to theta-based vector representation
      ;;; --------
      ;; now convert my velocity from speed/heading representation to components
      ;; along theta and perpendicular to theta
      let v1t (speed * cos (theta - heading))
      let v1l (speed * sin (theta - heading))
      
      ;; do the same for other-particle
      let v2t (speed2 * cos (theta - heading2))
      let v2l (speed2 * sin (theta - heading2))

      ;;; PHASE 3: manipulate vectors to implement last-collisioncollision
      ;;; --------
      ;; compute the velocity of the system's center of mass along theta
      let vcm (((mass * v1t) + (mass2 * v2t)) / (mass + mass2) )

      ;; now compute the new velocity for each particle along direction theta.
      ;; velocity perpendicular to theta is unaffected by a collision along theta,
      ;; so the next two lines actually implement the collision itself, in the
      ;; sense that the effects of the collision are exactly the following changes
      ;; in particle velocity.
      set v1t (2 * vcm - v1t)
      set v2t (2 * vcm - v2t)

      ;;; PHASE 4: convert back to normal speed/heading
      ;;; --------
      ;; now convert my velocity vector into my new speed and heading
      set speed sqrt ((v1t ^ 2) + (v1l ^ 2))
      set energy (0.5 * mass * (speed ^ 2))
      ;; if the magnitude of the velocity vector is 0, atan is undefined. but
      ;; speed will be 0, so heading is irrelevant anyway. therefore, in that
      ;; case we'll just leave it unmodified.
      if v1l != 0 or v1t != 0
      [ set heading (theta - (atan v1l v1t)) ]
      
      ;; and do the same for other-particle
      ask candidate [
        set speed sqrt ((v2t ^ 2) + (v2l ^ 2))
        set energy (0.5 * mass * (speed ^ 2))
        if v2l != 0 or v2t != 0
        [ set heading (theta - (atan v2l v2t)) ]
      ]

      ;;; PHASE 5: final updates
      ;;; --------
      set last-collision candidate
      ask candidate [ set last-collision myself ]

    ]
  ]
end














